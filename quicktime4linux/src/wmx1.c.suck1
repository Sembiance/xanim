#include "quicktime.h"

int quicktime_init_codec_wmx1(quicktime_video_map_t *vtrack)
{
	int i;
	quicktime_wmx1_codec_t *codec = &(vtrack->codecs.wmx1_codec);

	codec->key_frame = 0;
	codec->key_mask = 0;
	codec->new_frame = 0;
	codec->keyframe_position = 0;
	codec->newframe_position = 0;
	codec->quality = 100;
	codec->use_float = 0;
	codec->threshold = 5;
	return 0;
}

int quicktime_delete_codec_wmx1(quicktime_video_map_t *vtrack)
{
	quicktime_wmx1_codec_t *codec = &(vtrack->codecs.wmx1_codec);
	if(codec->key_frame) free(codec->key_frame);
	if(codec->key_mask) free(codec->key_mask);
	if(codec->new_frame) free(codec->new_frame);
	return 0;
}


int wmx1_init_buffers(quicktime_wmx1_codec_t *codec, int w, int h)
{
	if(!codec->key_frame)
	{
		unsigned char *endpoint, *byte;

// Allocate the frames.
		codec->key_frame = malloc(w * h * 3);
		codec->key_mask = malloc(w * h);
		codec->new_frame = malloc(w * h * 3);
// Clear the frames.
		for(byte = codec->key_frame, endpoint = byte + w * h * 3; 
			byte < endpoint; byte++)
		{
			*byte = 0;
		}
		for(byte = codec->key_mask, endpoint = byte + w * h; 
			byte < endpoint; byte++)
		{
			*byte = 0;
		}
		for(byte = codec->new_frame, endpoint = byte + w * h * 3; 
			byte < endpoint; byte++)
		{
			*byte = 0;
		}
	return 0;
}

int quicktime_encode_wmx1(quicktime_t *file, unsigned char **row_pointers, int track)
{
	long offset = quicktime_position(file);
	quicktime_video_map_t *vtrack = &(file->vtracks[track]);
	quicktime_wmx1_codec_t *codec = &(vtrack->codecs.wmx1_codec);
	int result = 0;
	int width = vtrack->track->tkhd.track_width;
	int height = vtrack->track->tkhd.track_height;
	unsigned char *buffer = vtrack->codecs.wmx1_codec.work_buffer;
	unsigned char *row_pointer, *endpoint;
	unsigned char *old_pointer, *mask_pointer, *new_pointer;
	int i, total_different;

	wmx1_init_buffers(codec, width, height);

// Compare row_buffers against key_frame.
// Generate a key_mask of differing pixels and a new_frame of those pixels.
// Count the total number of differing pixels.
	total_different = 0;
	for(i = 0; i < height; i++)
	{
		row_pointer = row_pointers[y];
		endpoint = row_pointer + w * 3;
		old_pointer = codec->key_frame[y * width * 3];
		mask_pointer = codec->key_mask[y * width];
		new_pointer = codec->new_frame[y * width * 3];

		while(row_pointer < endpoint)
		{
// Get new values for comparison
			r1 = *old_pointer;
			g1 = *old_pointer;
			b1 = *old_pointer;
			r2 = *row_pointer++;
			g2 = *row_pointer++;
			b2 = *row_pointer++;

// Store decision.
			if(abs(r1 - r2) > codec->threshold ||
				abs(g1 - g2) > codec->threshold ||
				abs(b1 - b2) > codec->threshold)
			{
				*mask_pointer++ = 255;
				*new_pointer++ = r2;
				*new_pointer++ = g2;
				*new_pointer++ = b2;
				*old_pointer++ = r2;
				*old_pointer++ = g2;
				*old_pointer++ = b2;
				total_different++;
			}
			else
			{
				*mask_pointer++ = 0;
				*new_pointer++ = 0;
				*new_pointer++ = 0;
				*new_pointer++ = 0;
				old_pointer += 3;
			}
		}
	}

// Decide whether to store a new keyframe or a difference frame.
	if(total_different > width * height / 2)
	{
// Copy the new frame into the keyframe and store as a new keyframe.
		for(i = 0; i < height; i++)
		{
			row_pointer = row_pointers[i * width * 3];
			old_pointer = codec->key_frame[i * width * 3];
			endpoint = old_pointer + width * 3;
			while(old_pointer < endpoint)
			{
				*old_pointer++ = *row_pointer++;
				*old_pointer++ = *row_pointer++;
				*old_pointer++ = *row_pointer++;
			}
		}
		result = wmx1_write_frame(file, codec, codec->key_frame, width, height);
		quicktime_set_keyframe(file, file->vtracks[track].current_position);
	}
	else
	{
// Store a difference frame.
// Store the greyscale mask.
		result = wmx1_write_mask(file, codec, codec->key_mask, width, height);
// Store the difference frame.
		result += wmx1_write_frame(file, codec, codec->new_frame, width, height);
	}

	if(result) result = 0; else result = 1;

	quicktime_update_tables(file->vtracks[track].track,
						offset,
						file->vtracks[track].current_chunk,
						file->vtracks[track].current_position,
						1,
						bytes);

	file->vtracks[track].current_chunk++;
	return result;
}

int quicktime_decode_wmx1(quicktime_t *file, unsigned char **row_pointers, int track)
{
	quicktime_video_map_t *vtrack = &(file->vtracks[track]);
	quicktime_wmx1_codec_t *codec = &(vtrack->codecs.wmx1_codec);
	int width = vtrack->track->tkhd.track_width;
	int height = vtrack->track->tkhd.track_height;







	long bytes, x, y;
	unsigned char *buffer;
	char *input_row;
	int result = 0;
	int y1, u, v, y2, r, g, b;
	int endpoint = width * 3;

	vtrack->track->tkhd.track_width;
	quicktime_set_video_position(file, vtrack->current_position, track);
	bytes = quicktime_frame_size(file, vtrack->current_position, track);

	if(file->vtracks[track].frames_cached)
	{
		buffer = file->vtracks[track].frame_cache[vtrack->current_position];
	}
	else
	{
		buffer = codec->work_buffer;
		result = quicktime_read_data(file, buffer, bytes);
		if(result) result = 0; else result = 1;
	}

	for(y = 0; y < height; y++)
	{
		input_row = &buffer[y * codec->bytes_per_line];
		for(x = 0; x < endpoint; )
		{
			y1 = (unsigned char)*input_row++;
			u = *input_row++;
			y2 = (unsigned char)*input_row++;
			v = *input_row++;
			y1 <<= 16;
			y2 <<= 16;

			r = ((y1 + codec->vtor[v]) >> 16);
			g = ((y1 + codec->utog[u] + codec->vtog[v]) >> 16);
			b = ((y1 + codec->utob[u]) >> 16);
			if(r < 0) r = 0;
			if(g < 0) g = 0;
			if(b < 0) b = 0;
			if(r > 255) r = 255;
			if(g > 255) g = 255;
			if(b > 255) b = 255;

			row_pointers[y][x++] = r;
			row_pointers[y][x++] = g;
			row_pointers[y][x++] = b;

// Odd numbers of columns quit here
			if(x < endpoint)
			{
				r = ((y2 + codec->vtor[v]) >> 16);
				g = ((y2 + codec->utog[u] + codec->vtog[v]) >> 16);
				b = ((y2 + codec->utob[u]) >> 16);
				if(r < 0) r = 0;
				if(g < 0) g = 0;
				if(b < 0) b = 0;
				if(r > 255) r = 255;
				if(g > 255) g = 255;
				if(b > 255) b = 255;

				row_pointers[y][x++] = r;
				row_pointers[y][x++] = g;
				row_pointers[y][x++] = b;
			}
		}
	}
	return result;
}
